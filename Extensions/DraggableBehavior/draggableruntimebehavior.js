var gdjs;(function(n){class d extends n.RuntimeBehavior{constructor(e,a,t){super(e,a,t);this._draggedByDraggableManager=null;this._justDropped=!1;this._checkCollisionMask=!!a.checkCollisionMask}updateFromBehaviorData(e,a){return!0}onDeActivate(){this._endDrag()}onDestroy(){this.onDeActivate()}_endDrag(){this._draggedByDraggableManager&&(this._draggedByDraggableManager.endDrag(),this._justDropped=!0),this._draggedByDraggableManager=null}_dismissDrag(){this._draggedByDraggableManager=null}_tryBeginDrag(e){if(this._draggedByDraggableManager)return!1;const a=e.getGame().getInputManager(),t=g.getMouseManager(e);if(a.isMouseButtonPressed(0)&&!t.isDragging(this)){if(t.tryAndTakeDragging(e,this))return this._draggedByDraggableManager=t,!0}else{const r=a.getStartedTouchIdentifiers();for(let o=0;o<r.length;++o){const u=g.getTouchManager(e,r[o]);if(!u.isDragging(this)&&u.tryAndTakeDragging(e,this))return this._draggedByDraggableManager=u,!0}}return!1}_shouldEndDrag(e){return this._draggedByDraggableManager?this._draggedByDraggableManager.shouldEndDrag(e,this):!1}_updateObjectPosition(e){return this._draggedByDraggableManager?(this._draggedByDraggableManager.updateObjectPosition(e,this),!0):!1}doStepPreEvents(e){this._tryBeginDrag(e),this._shouldEndDrag(e)&&this._endDrag(),this._updateObjectPosition(e)}doStepPostEvents(e){const a=g.getMouseManager(e);a.leftPressedLastFrame=e.getGame().getInputManager().isMouseButtonPressed(0),this._justDropped=!1}isDragged(){return!!this._draggedByDraggableManager}wasJustDropped(){return this._justDropped}}n.DraggableRuntimeBehavior=d;class g{constructor(e){this._draggingSomething=!1;this._draggableBehavior=null;this._xOffset=0;this._yOffset=0}static getMouseManager(e){return e.mouseDraggableManager||(e.mouseDraggableManager=new s(e)),e.mouseDraggableManager}static getTouchManager(e,a){return e.touchDraggableManagers||(e.touchDraggableManagers=[]),e.touchDraggableManagers[a]||(e.touchDraggableManagers[a]=new i(e,a)),e.touchDraggableManagers[a]}tryAndTakeDragging(e,a){if(this._draggableBehavior&&a.owner.getZOrder()<=this._draggableBehavior.owner.getZOrder())return!1;const t=this.getPosition(e,a);if(a.owner.insideObject(t[0],t[1])){if(a._checkCollisionMask&&!a.owner.isCollidingWithPoint(t[0],t[1]))return!1}else return!1;return this._draggableBehavior&&this._draggableBehavior._dismissDrag(),this._draggableBehavior=a,this._xOffset=t[0]-a.owner.getX(),this._yOffset=t[1]-a.owner.getY(),!0}updateObjectPosition(e,a){const t=this.getPosition(e,a);(a.owner.getX()!=t[0]-this._xOffset||a.owner.getY()!=t[1]-this._yOffset)&&(a.owner.setX(t[0]-this._xOffset),a.owner.setY(t[1]-this._yOffset),this._draggingSomething=!0)}endDrag(){this._draggingSomething=!1,this._draggableBehavior=null}}class s extends g{constructor(e){super(e);this.leftPressedLastFrame=!1}isDragging(e){return this.leftPressedLastFrame||this._draggingSomething}getPosition(e,a){const t=n.staticArray(s.prototype.getPosition),r=e.getGame().getInputManager();return e.getLayer(a.owner.getLayer()).convertCoords(r.getMouseX(),r.getMouseY(),0,t)}shouldEndDrag(e,a){return!e.getGame().getInputManager().isMouseButtonPressed(0)}}class i extends g{constructor(e,a){super(e);this._touchId=a}isDragging(e){return this._draggingSomething}getPosition(e,a){const t=n.staticArray(i.prototype.getPosition),r=e.getGame().getInputManager();return e.getLayer(a.owner.getLayer()).convertCoords(r.getTouchX(this._touchId),r.getTouchY(this._touchId),0,t)}shouldEndDrag(e,a){return e.getGame().getInputManager().getAllTouchIdentifiers().indexOf(this._touchId)===-1}}n.registerBehavior("DraggableBehavior::Draggable",n.DraggableRuntimeBehavior)})(gdjs||(gdjs={}));
//# sourceMappingURL=draggableruntimebehavior.js.map
